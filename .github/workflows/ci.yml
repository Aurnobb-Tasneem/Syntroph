# name: CI/CD Pipeline

# on:
#   push:
#     branches: [main, dev]
#   pull_request:
#     branches: [main, dev]

# env:
#   NODE_VERSION: '20'
#   PYTHON_VERSION: '3.12'
#   PNPM_VERSION: '9.0.0'

# jobs:
#   # Lint and type check
#   lint:
#     name: Lint and Type Check
#     runs-on: ubuntu-latest
    
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4
      
#       - name: Setup pnpm
#         uses: pnpm/action-setup@v2
#         with:
#           version: ${{ env.PNPM_VERSION }}
      
#       - name: Setup Node.js
#         uses: actions/setup-node@v4
#         with:
#           node-version: ${{ env.NODE_VERSION }}
#           cache: 'pnpm'
      
#       - name: Install dependencies
#         run: pnpm install
      
#       - name: Run linters
#         run: pnpm lint
      
#       - name: Type check
#         run: pnpm check-types

#   # Test Django backend
#   test-api:
#     name: Test Django API
#     runs-on: ubuntu-latest
    
#     services:
#       postgres:
#         image: postgres:16-alpine
#         env:
#           POSTGRES_USER: test_user
#           POSTGRES_PASSWORD: test_password
#           POSTGRES_DB: test_db
#         options: >-
#           --health-cmd pg_isready
#           --health-interval 10s
#           --health-timeout 5s
#           --health-retries 5
#         ports:
#           - 5432:5432
      
#       redis:
#         image: redis:7-alpine
#         options: >-
#           --health-cmd "redis-cli ping"
#           --health-interval 10s
#           --health-timeout 5s
#           --health-retries 5
#         ports:
#           - 6379:6379
    
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4
      
#       - name: Setup Python
#         uses: actions/setup-python@v5
#         with:
#           python-version: ${{ env.PYTHON_VERSION }}
#           cache: 'pip'
      
#       - name: Install dependencies
#         run: |
#           cd apps/api
#           pip install -r requirements.txt
#           pip install pytest pytest-django pytest-cov
      
#       - name: Run migrations
#         env:
#           DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
#           REDIS_URL: redis://localhost:6379/0
#           DJANGO_SECRET_KEY: test-secret-key-for-ci
#         run: |
#           cd apps/api
#           python manage.py migrate
      
#       - name: Run tests
#         env:
#           DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
#           REDIS_URL: redis://localhost:6379/0
#           DJANGO_SECRET_KEY: test-secret-key-for-ci
#         run: |
#           cd apps/api
#           pytest --cov=. --cov-report=xml
      
#       - name: Upload coverage
#         uses: codecov/codecov-action@v3
#         with:
#           file: ./apps/api/coverage.xml
#           flags: api
#           name: api-coverage

#   # Test Next.js web app
#   test-web:
#     name: Test Next.js Web
#     runs-on: ubuntu-latest
    
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4
      
#       - name: Setup pnpm
#         uses: pnpm/action-setup@v2
#         with:
#           version: ${{ env.PNPM_VERSION }}
      
#       - name: Setup Node.js
#         uses: actions/setup-node@v4
#         with:
#           node-version: ${{ env.NODE_VERSION }}
#           cache: 'pnpm'
      
#       - name: Install dependencies
#         run: pnpm install
      
#       - name: Run tests
#         run: pnpm test --filter=web

#   # Build Docker images
#   build-docker:
#     name: Build Docker Images
#     runs-on: ubuntu-latest
#     if: github.event_name == 'push'
#     needs: [lint, test-api, test-web]
    
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4
      
#       - name: Set up Docker Buildx
#         uses: docker/setup-buildx-action@v3
      
#       - name: Login to GitHub Container Registry
#         uses: docker/login-action@v3
#         with:
#           registry: ghcr.io
#           username: ${{ github.actor }}
#           password: ${{ secrets.GITHUB_TOKEN }}
      
#       - name: Build and push API image
#         uses: docker/build-push-action@v5
#         with:
#           context: ./apps/api
#           file: ./apps/api/Dockerfile
#           push: true
#           tags: |
#             ghcr.io/${{ github.repository }}/api:${{ github.sha }}
#             ghcr.io/${{ github.repository }}/api:latest
#           cache-from: type=gha
#           cache-to: type=gha,mode=max
      
#       - name: Build and push Web image
#         uses: docker/build-push-action@v5
#         with:
#           context: ./apps/web
#           file: ./apps/web/Dockerfile
#           push: true
#           tags: |
#             ghcr.io/${{ github.repository }}/web:${{ github.sha }}
#             ghcr.io/${{ github.repository }}/web:latest
#           cache-from: type=gha
#           cache-to: type=gha,mode=max

#   # Deploy to staging (optional)
#   # deploy-staging:
#   #   name: Deploy to Staging
#   #   runs-on: ubuntu-latest
#   #   needs: build-docker
#   #   if: github.ref == 'refs/heads/dev'
#   #   
#   #   steps:
#   #     - name: Deploy to staging server
#   #       run: |
#   #         # Add deployment script here
#   #         echo "Deploying to staging..."
